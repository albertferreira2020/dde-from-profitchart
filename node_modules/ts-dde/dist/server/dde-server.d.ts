/// <reference types="node" />
import { EventEmitter } from 'events';
export declare class DdeServer extends EventEmitter {
    readonly serviceName: string;
    private readonly invoke;
    constructor(serviceName: string);
    onBeforeConnect: (topic: string) => boolean;
    onAfterConnect: (service: string, topic: string) => undefined;
    onDisconnect: (service: string, topic: string) => undefined;
    onStartAdvise: (service: string, topic: string, item: string, format: string) => boolean;
    onStopAdvise: (service: string, topic: string, item: string) => undefined;
    onExecute: (service: string, topic: string, command: string) => string;
    onPoke: (service: string, topic: string, item: string, data: string[], format: string) => string;
    onRequest: (service: string, topic: string, item: string, format: string) => string;
    onAdvise: (topic: string, item: string, format: string) => string;
    /**
     * 注册服务
     */
    register(): void;
    /**
     * 注销服务
     */
    unregister(): void;
    /**
     * 通知所有客户端指定主题名称和项目名称对的数据已更改
     */
    advise(topic: string, item: string): void;
    /**
     * 断开连接
     */
    disconnect(): void;
    /**
     * 暂停连接
     */
    pause(): void;
    /**
     * 恢复连接
     */
    resume(): void;
    /**
     * 释放此实例持有的所有资源
     */
    dispose(): void;
    /**
     * 获取服务名称
     */
    service(): string;
    /**
     * 是否已注册
     */
    isRegistered(): boolean;
}
