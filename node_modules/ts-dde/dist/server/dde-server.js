"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var utils_1 = require("../utils");
var DdeServer = /** @class */ (function (_super) {
    __extends(DdeServer, _super);
    function DdeServer(serviceName) {
        var _this = _super.call(this) || this;
        _this.serviceName = serviceName;
        _this.onBeforeConnect = function (topic) { return true; };
        _this.onAfterConnect = function (service, topic) { return undefined; };
        _this.onDisconnect = function (service, topic) { return undefined; };
        _this.onStartAdvise = function (service, topic, item, format) { return true; };
        _this.onStopAdvise = function (service, topic, item) { return undefined; };
        _this.onExecute = function (service, topic, command) { return ''; };
        _this.onPoke = function (service, topic, item, data, format) { return ''; };
        _this.onRequest = function (service, topic, item, format) { return ''; };
        _this.onAdvise = function (topic, item, format) { return ''; };
        _this.invoke = utils_1.getServerInvoke(_this);
        return _this;
    }
    /**
     * 注册服务
     */
    DdeServer.prototype.register = function () {
        return this.invoke({ method: 'Register' }, true);
    };
    /**
     * 注销服务
     */
    DdeServer.prototype.unregister = function () {
        return this.invoke({ method: 'Unregister' }, true);
    };
    /**
     * 通知所有客户端指定主题名称和项目名称对的数据已更改
     */
    DdeServer.prototype.advise = function (topic, item) {
        return this.invoke({
            method: 'Advise',
            topic: topic,
            item: item,
        }, function () { return undefined; });
    };
    /**
     * 断开连接
     */
    DdeServer.prototype.disconnect = function () {
        return this.invoke({ method: 'Disconnect' }, true);
    };
    /**
     * 暂停连接
     */
    DdeServer.prototype.pause = function () {
        return this.invoke({ method: 'Pause' }, true);
    };
    /**
     * 恢复连接
     */
    DdeServer.prototype.resume = function () {
        return this.invoke({ method: 'Resume' }, true);
    };
    /**
     * 释放此实例持有的所有资源
     */
    DdeServer.prototype.dispose = function () {
        return this.invoke({ method: 'Dispose' }, true);
    };
    /**
     * 获取服务名称
     */
    DdeServer.prototype.service = function () {
        return this.invoke({ method: 'Service' }, true);
    };
    /**
     * 是否已注册
     */
    DdeServer.prototype.isRegistered = function () {
        return this.invoke({ method: 'IsRegistered' }, true);
    };
    return DdeServer;
}(events_1.EventEmitter));
exports.DdeServer = DdeServer;
