"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var utils_1 = require("../utils");
var DdeClient = /** @class */ (function (_super) {
    __extends(DdeClient, _super);
    function DdeClient(options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.format = 1;
        _this.hot = true;
        // 十分钟超时
        _this.timeout = 600000;
        if (options.format !== undefined) {
            _this.format = options.format;
        }
        if (options.hot !== undefined) {
            _this.hot = options.hot;
        }
        if (options.timeout !== undefined) {
            _this.timeout = options.timeout;
        }
        _this.invoke = utils_1.getClientInvoke(_this);
        return _this;
    }
    /**
     * 连接服务器
     */
    DdeClient.prototype.connect = function () {
        return this.invoke({ method: 'Connect' }, true);
    };
    /**
     * 断开与服务器的连接
     */
    DdeClient.prototype.disconnect = function () {
        return this.invoke({ method: 'Disconnect' }, true);
    };
    /**
     * 暂停当前的会话
     */
    DdeClient.prototype.pause = function () {
        return this.invoke({ method: 'Pause' }, true);
    };
    /**
     * 恢复当前的会话
     */
    DdeClient.prototype.resume = function () {
        return this.invoke({ method: 'Resume' }, true);
    };
    /**
     * 向服务器发送命令
     *
     * @param command 命令内容
     */
    DdeClient.prototype.execute = function (command) {
        return this.invoke({
            method: 'Execute',
            command: command,
            timeout: this.timeout,
        }, true);
    };
    /**
     * 发送数据到服务器
     *
     * @param item 项目名称
     * @param data 要发送的数据
     */
    DdeClient.prototype.poke = function (item, data) {
        return this.invoke({
            method: 'Poke',
            item: item || '',
            data: data,
            timeout: this.timeout,
        }, true);
    };
    /**
     * 请求指定项目名称的数据
     *
     * @param item 项目名称数组
     */
    DdeClient.prototype.request = function (item) {
        return this.invoke({
            method: 'Request',
            item: item,
            format: this.format,
            timeout: this.timeout,
        }, true);
    };
    /**
     * 开启指定项目名称的会话
     *
     * @param item 项目名称列表
     */
    DdeClient.prototype.startAdvise = function (item) {
        return this.invoke({
            method: 'StartAdvise',
            item: item || '',
            format: this.format,
            hot: this.hot,
            timeout: this.timeout,
        }, true);
    };
    /**
     * 关闭指定项目名称的会话
     *
     * @param item 项目名称列表
     */
    DdeClient.prototype.stopAdvise = function (item) {
        return this.invoke({
            method: 'StopAdvise',
            item: item,
            timeout: this.timeout,
        }, true);
    };
    /**
     * 向服务器发送命令的异步操作
     *
     * @param command 命令内容
     * @param oncomplete 成功后的回调
     */
    DdeClient.prototype.beginExecute = function (command, oncomplete) {
        return this.invoke({
            method: 'BeginExecute',
            command: command,
        }, oncomplete);
    };
    /**
     * 向服务器发送数据的异步操作
     *
     * @param item 项目名称
     * @param data 数据
     * @param format 数据格式
     * @param oncomplete 成功后的回调
     */
    DdeClient.prototype.beginPoke = function (item, data, format, oncomplete) {
        return this.invoke({
            method: 'BeginPoke',
            item: item,
            data: data,
            format: this.format,
        }, oncomplete);
    };
    /**
     * 向服务器请求数据的异步操作
     *
     * @param item 项目名称
     * @param format 数据格式
     * @param oncomplete 成功后的回调
     */
    DdeClient.prototype.beginRequest = function (item, format, oncomplete) {
        return this.invoke({
            method: 'BeginRequest',
            item: item,
            format: this.format,
        }, oncomplete);
    };
    /**
     * 开启与服务器指定项目的会话的异步操作
     *
     * @param item 项目名称
     * @param format 数据格式
     * @param hot 是否为热连接
     * @param oncomplete 成功后的回调
     */
    DdeClient.prototype.beginStartAdvise = function (item, format, hot, oncomplete) {
        return this.invoke({
            method: 'BeginStartAdvise',
            item: item,
            format: this.format,
            hot: this.hot,
        }, oncomplete);
    };
    /**
     * 关闭与服务器指定项目的会话的异步操作
     *
     * @param item 项目名称
     * @param oncomplete 成功后的回调
     */
    DdeClient.prototype.beginStopAdvise = function (item, oncomplete) {
        return this.invoke({
            method: 'BeginStopAdvise',
            item: item,
        }, oncomplete);
    };
    /**
     * 释放所有的的资源
     */
    DdeClient.prototype.dispose = function () {
        return this.invoke({ method: 'Dispose' }, true);
    };
    /**
     * 服务名称
     */
    DdeClient.prototype.service = function () {
        return this.invoke({ method: 'Service' }, true);
    };
    /**
     * 主题名称
     */
    DdeClient.prototype.topic = function () {
        return this.invoke({ method: 'Topic' }, true);
    };
    /**
     * 是否已连接
     */
    DdeClient.prototype.isConnected = function () {
        return this.invoke({ method: 'IsConnected' }, true);
    };
    /**
     * 是否已暂停
     */
    DdeClient.prototype.isPaused = function () {
        return this.invoke({ method: 'IsPaused' }, true);
    };
    return DdeClient;
}(events_1.EventEmitter));
exports.DdeClient = DdeClient;
