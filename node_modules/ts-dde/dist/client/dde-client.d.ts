/// <reference types="node" />
import { EventEmitter } from 'events';
import { DdeClientOptions, DdeClientReqeustData, IAsyncResult } from './types';
export declare class DdeClient extends EventEmitter {
    readonly options: DdeClientOptions;
    private readonly invoke;
    format: number;
    hot: boolean;
    timeout: number;
    constructor(options: DdeClientOptions);
    /**
     * 连接服务器
     */
    connect(): void;
    /**
     * 断开与服务器的连接
     */
    disconnect(): void;
    /**
     * 暂停当前的会话
     */
    pause(): void;
    /**
     * 恢复当前的会话
     */
    resume(): void;
    /**
     * 向服务器发送命令
     *
     * @param command 命令内容
     */
    execute(command: string): void;
    /**
     * 发送数据到服务器
     *
     * @param item 项目名称
     * @param data 要发送的数据
     */
    poke(item: string | null, data: string): void;
    /**
     * 请求指定项目名称的数据
     *
     * @param item 项目名称数组
     */
    request(item: string[]): DdeClientReqeustData[];
    /**
     * 开启指定项目名称的会话
     *
     * @param item 项目名称列表
     */
    startAdvise(item?: string[]): void;
    /**
     * 关闭指定项目名称的会话
     *
     * @param item 项目名称列表
     */
    stopAdvise(item?: string[]): void;
    /**
     * 向服务器发送命令的异步操作
     *
     * @param command 命令内容
     * @param oncomplete 成功后的回调
     */
    beginExecute(command: string, oncomplete: () => void): IAsyncResult;
    /**
     * 向服务器发送数据的异步操作
     *
     * @param item 项目名称
     * @param data 数据
     * @param format 数据格式
     * @param oncomplete 成功后的回调
     */
    beginPoke(item: string, data: string, format: number, oncomplete: () => void): IAsyncResult;
    /**
     * 向服务器请求数据的异步操作
     *
     * @param item 项目名称
     * @param format 数据格式
     * @param oncomplete 成功后的回调
     */
    beginRequest(item: string, format: number, oncomplete: () => void): IAsyncResult;
    /**
     * 开启与服务器指定项目的会话的异步操作
     *
     * @param item 项目名称
     * @param format 数据格式
     * @param hot 是否为热连接
     * @param oncomplete 成功后的回调
     */
    beginStartAdvise(item: string, format: number, hot: boolean, oncomplete: () => void): IAsyncResult;
    /**
     * 关闭与服务器指定项目的会话的异步操作
     *
     * @param item 项目名称
     * @param oncomplete 成功后的回调
     */
    beginStopAdvise(item: string, oncomplete: () => void): IAsyncResult;
    /**
     * 释放所有的的资源
     */
    dispose(): void;
    /**
     * 服务名称
     */
    service(): string;
    /**
     * 主题名称
     */
    topic(): string;
    /**
     * 是否已连接
     */
    isConnected(): boolean;
    /**
     * 是否已暂停
     */
    isPaused(): boolean;
}
